{"version":3,"file":"static/js/910.cacf97d9.chunk.js","mappings":"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","sources":["components/auth/googleBtn/index.js","components/common/input/index.jsx","pages/auth/login/useLogin.js","pages/auth/login/index.tsx","../../packages/react-router-dom/index.tsx"],"sourcesContent":["import { GoogleLogin } from \"@react-oauth/google\";\nimport Peer from \"peerjs\";\nimport { toast } from \"react-toastify\";\nimport { useAppDispatch } from \"../../../store/hooks\";\nimport { googleAuth } from \"../../../store/slices/user\";\n\nconst GoogleBtn = () => {\n  const dispatch = useAppDispatch();\n  async function handleSuccess(credentialResponse) {\n    const peer = new Peer();\n    await new Promise((resolve) => {\n      peer.on(\"open\", (id) => resolve(id));\n    });\n    const token = credentialResponse.credential;\n    const peerId = await peer.id;\n    if (token && peerId) {\n      dispatch(googleAuth({ token, peerId }));\n    } else {\n      toast.error(\"Something went wrong\");\n    }\n  }\n\n  const handleError = (error) => {\n    console.log(error);\n  };\n\n  return (\n    <GoogleLogin\n      size=\"large\"\n      text=\"signup_with\"\n      width=\"364px\"\n      theme=\"outline\"\n      logo_alignment=\"center\"\n      onSuccess={handleSuccess}\n      onError={handleError}\n      useOneTap\n    />\n  );\n};\n\nexport default GoogleBtn;\n","import { Children, useRef, useState } from \"react\";\n\nconst Input = (props) => {\n  const {\n    id,\n    label,\n    placeholder,\n    width = \"100%\",\n    type = \"text\",\n    name,\n    value,\n    onChange,\n    onBlur,\n    formik,\n    className,\n  } = props;\n  const Icon = props.children;\n  const childArray = Children.toArray(Icon);\n  const [isPassword, setIsPassword] = useState(\n    type === \"password\" ? true : false\n  );\n  const inputRef = useRef();\n  //toggle password field\n  const togglePassword = () => {\n    switch (inputRef.current.type) {\n      case \"password\":\n        inputRef.current.type = \"text\";\n        setIsPassword(false);\n        break;\n      case \"text\":\n        inputRef.current.type = \"password\";\n        setIsPassword(true);\n        break;\n\n      default:\n        setIsPassword(false);\n        break;\n    }\n  };\n\n  return (\n    <div className={`w-[${width}]`}>\n      <label htmlFor={id} className=\"text-[0.9rem] text-[#404385]\">\n        {label}\n      </label>\n      <div\n        className={\n          className\n            ? `${className} ${\n                formik.touched[name] && formik.errors[name]\n                  ? \"border-[#bb3d34]\"\n                  : \"border-[#CFDEF4]\"\n              }`\n            : `single-input-wrapper flex items-center justify-between my-[12px] bg-[#fff] border-[2px] ${\n                formik.touched[name] && formik.errors[name]\n                  ? \"border-[#bb3d34]\"\n                  : \"border-[#CFDEF4]\"\n              } drop-shadow-[0_0_2px_#CFDEF4]  focus:outline-none rounded-[4px] h-[40px]`\n        }\n      >\n        <input\n          ref={inputRef}\n          id={id}\n          type={type}\n          name={name}\n          className={`w-[100%] h-full p-[8px] text-[0.9rem] focus:outline-none`}\n          placeholder={placeholder}\n          onChange={onChange}\n          value={value}\n          onBlur={onBlur}\n        />\n        <span\n          className=\"mr-[10px] cursor-pointer\"\n          onClick={type === \"password\" && togglePassword}\n        >\n          {Icon && childArray.length === 1\n            ? Icon\n            : isPassword === true\n            ? childArray[0]\n            : childArray[1]}\n        </span>\n      </div>\n      {formik.touched[name] && formik.errors[name] ? (\n        <p className=\"text-[14px] text-red-600 relative bottom-[8px]\">\n          {formik.errors[name]}\n        </p>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Input;\n","import {useFormik} from 'formik';\nimport { useNavigate } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport { AUTH } from '../../../routes/routes';\n\n\nconst useSignUp = () => {\n    const navigate = useNavigate()\n    const initialValues = {\n        name: '',\n        email: '',\n       \n    }\n    const validationSchema = Yup.object({\n        name: Yup.string().required('Name is required.!'),\n        email: Yup.string().email(\"Invalid email\").required('E-mail is required.!'),\n    })\n\n    const onSubmit = values => {\n        navigate(`${AUTH.BASE_PATH}/${AUTH.PAGES.OTP}`)       \n    }\n    const formik = useFormik({\n        initialValues,\n        validationSchema,\n        onSubmit\n    })\n\n    return {formik}\n};\n\n\nexport default useSignUp","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport GoogleBtn from \"../../../components/auth/googleBtn\";\nimport { AUTH } from \"../../../routes/routes\";\nimport useSignUp from \"./useLogin\";\nimport Input from \"../../../components/common/input\";\n\nconst LoginPage: React.FC = () => {\n    const { formik } = useSignUp();\n    return (\n        <div className=\"right-column flex flex-col h-full justify-between\">\n            <div className=\"top\">\n                <h1 className=\"font-medium text-[40px]\">\n                    Letâ€™s get{\" \"}\n                    <span className=\"text-[#3F8CFF] mb-[16px]\">Started</span>\n                </h1>\n                <p className=\"mb-[60px] text-[#404385] text-xl\">\n                    Monitor and chat with the visitors on your website,respond\n                    to support{\" \"}\n                </p>\n                <div className=\"form-control\">\n                    <form action=\"\" onSubmit={formik.handleSubmit}>\n                        <Input\n                            id=\"signupUserNameInp\"\n                            label=\"Name\"\n                            placeholder=\"Enter your name\"\n                            name=\"name\"\n                            value={formik.values.name}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            formik={formik}\n                            className=\"mt-1 mb-[12px] block w-full px-3 h-[50px] bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400\n      focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500\n      disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none\n      invalid:border-pink-500 invalid:text-pink-600\n      focus:invalid:border-pink-500 focus:invalid:ring-pink-500\n \"\n                        />\n\n                        <Input\n                            id=\"signupEmailInp\"\n                            label=\"Email\"\n                            placeholder=\"Enter your email\"\n                            name=\"email\"\n                            value={formik.values.email}\n                            onChange={formik.handleChange}\n                            onBlur={formik.handleBlur}\n                            formik={formik}\n                            className=\"mt-1 mb-[12px] block w-full px-3 h-[50px] bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400\n      focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500\n      disabled:bg-slate-50 disabled:text-slate-500 disabled:border-slate-200 disabled:shadow-none\n      invalid:border-pink-500 invalid:text-pink-600\n      focus:invalid:border-pink-500 focus:invalid:ring-pink-500\n    \"\n                        />\n\n                        <button className=\"w-[100%] bg-[#3F8CFF] text-[#FFFFFF] rounded-[10px] h-[50px] mb-[24px] mt-[3rem]\">\n                            Get OTP\n                        </button>\n                    </form>\n                </div>\n\n                <div className=\"create-account\">\n                    <p className=\"text-[16px] text-[#404385] text-right\">\n                        Already have an account?{\" \"}\n                        <Link to={`${AUTH.BASE_PATH}/${AUTH.PAGES.SIGNIN}`}>\n                            {\" \"}\n                            <span className=\"text-[#3F8CFF]\">Login</span>\n                        </Link>\n                    </p>\n                </div>\n            </div>\n\n            <div className=\"bottom flex flex-col items-center \">\n                <div className=\"flex gap-[15px] w-[100%] mb-8 items-center text-center before:content-normal before:inline-block before:h-[1px] before:bg-[#D9D9D9] before:w-[50%] after:content-normal after:inline-block after:h-[1px] after:bg-[#D9D9D9] after:w-[50%]\">\n                    OR\n                </div>\n                <GoogleBtn />\n            </div>\n        </div>\n    );\n};\n\nexport default LoginPage;\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type { BrowserHistory, HashHistory, History } from \"history\";\nimport { createBrowserHistory, createHashHistory } from \"history\";\nimport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  resolvePath,\n  renderMatches,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n} from \"react-router\";\nimport type { To } from \"react-router\";\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// RE-EXPORTS\n////////////////////////////////////////////////////////////////////////////////\n\n// Note: Keep in sync with react-router exports!\nexport {\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createRoutesFromChildren,\n  generatePath,\n  matchRoutes,\n  matchPath,\n  createPath,\n  parsePath,\n  renderMatches,\n  resolvePath,\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigate,\n  useNavigationType,\n  useOutlet,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useOutletContext,\n};\n\nexport { NavigationType } from \"react-router\";\nexport type {\n  Hash,\n  Location,\n  Path,\n  To,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigator,\n  OutletProps,\n  Params,\n  PathMatch,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  Pathname,\n  Search,\n  RoutesProps,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n} from \"react-router\";\n\n////////////////////////////////////////////////////////////////////////////////\n// COMPONENTS\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nfunction isModifiedEvent(event: React.MouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    { onClick, reloadDocument, replace = false, state, target, to, ...rest },\n    ref\n  ) {\n    let href = useHref(to);\n    let internalOnClick = useLinkClickHandler(to, { replace, state, target });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented && !reloadDocument) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: { isActive: boolean }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: { isActive: boolean }) => React.CSSProperties);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let location = useLocation();\n    let path = useResolvedPath(to);\n\n    let locationPathname = location.pathname;\n    let toPathname = path.pathname;\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [classNameProp, isActive ? \"active\" : null]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp({ isActive }) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\" ? children({ isActive }) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// HOOKS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to);\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (\n        event.button === 0 && // Ignore everything but left clicks\n        (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n        !isModifiedEvent(event) // Ignore clicks with modifier keys\n      ) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here.\n        let replace =\n          !!replaceProp || createPath(location) === createPath(path);\n\n        navigate(to, { replace, state });\n      }\n    },\n    [location, navigate, path, replaceProp, state, target, to]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(defaultInit?: URLSearchParamsInit) {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(() => {\n    let searchParams = createSearchParams(location.search);\n\n    for (let key of defaultSearchParamsRef.current.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParamsRef.current.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n\n    return searchParams;\n  }, [location.search]);\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback(\n    (\n      nextInit: URLSearchParamsInit,\n      navigateOptions?: { replace?: boolean; state?: any }\n    ) => {\n      navigate(\"?\" + createSearchParams(nextInit), navigateOptions);\n    },\n    [navigate]\n  );\n\n  return [searchParams, setSearchParams] as const;\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n"],"names":["dispatch","useAppDispatch","credentialResponse","peer","Peer","Promise","resolve","on","id","token","credential","peerId","googleAuth","toast","size","text","width","theme","logo_alignment","onSuccess","onError","error","console","log","useOneTap","props","label","placeholder","type","name","value","onChange","onBlur","formik","className","Icon","children","childArray","Children","useState","isPassword","setIsPassword","inputRef","useRef","htmlFor","touched","errors","ref","onClick","current","length","navigate","useNavigate","validationSchema","Yup","required","email","useFormik","initialValues","onSubmit","values","AUTH","useSignUp","action","handleSubmit","handleChange","handleBlur","to","Link","React","reloadDocument","replace","state","target","rest","href","useHref","internalOnClick","replaceProp","location","useLocation","path","useResolvedPath","event","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","preventDefault","createPath","useLinkClickHandler","createElement","defaultPrevented"],"sourceRoot":""}